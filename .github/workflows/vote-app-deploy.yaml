name: Create Infrastructure and Deploy Vote App

on:    
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DEPLOY_NAME: sysdigvoteapp
  WORKER_IMG: voteapp/worker
  VOTE_IMG: voteapp/vote
  RESULT_IMG: voteapp/result 
  VERSION: latest
  SYSDIG_API_URL: https://app.us4.sysdig.com/
  SYSDIG_LINUX_BINARY: "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(curl -L -s https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
jobs:

  Build-Infrastructure:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set Azure AKS Context
      uses: azure/aks-set-context@v3
      with:
        resource-group: 'rg-eastus2-sysdig'
        cluster-name: 'aks-eastus2-sysdig'

    - name: Deploy Azure Infrastructure
      id: createInfra
      run: |

        # // Deploy templates
        az deployment sub create --name ${{ env.DEPLOY_NAME }} --location eastus2 --template-file templates/bicep/main.bicep
        
        # // Get names from deployment output
        rg_name=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.rgName.value' --output tsv)
        aks_name=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.aksName.value' --output tsv)
        acr_resource_id=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.acrId.value' --output tsv)
        acr_endpoint=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.acrEndpoint.value' --output tsv)

        # // Attach using acr-resource-id
        az aks update -n $aks_name -g $rg_name --attach-acr $acr_resource_id

        # // Export output variables
        echo "acr_resource_id=$acr_resource_id" >> $GITHUB_ENV
        echo "acr_endpoint=$acr_endpoint" >> $GITHUB_ENV

    - name: Install Sysdig Agents in AKS
      run: |

        #kubectl create ns sysdig-agent

        # helm repo add sysdig https://charts.sysdig.com
        # helm repo update
        # helm install sysdig-agent --namespace sysdig-agent \
        #   --set global.sysdig.accessKey=${{ secrets.SYSDIG_SECURE_TOKEN }} \
        #   --set global.sysdig.region=us4 \
        #   --set nodeAnalyzer.secure.vulnerabilityManagement.newEngineOnly=true \
        #   --set global.kspm.deploy=true \
        #   --set nodeAnalyzer.nodeAnalyzer.benchmarkRunner.deploy=false \
        #   --set global.clusterConfig.name=aks-eastus2-sysdig \
        #   sysdig/sysdig-deploy

    - name: Download workflow artifact
      uses: dawidd6/action-download-artifact@v2.27.0
      with:
        workflow: vote-app-security-scan.yaml
        workflow_conclusion: completed


    # - name: Download Container Images Artifact
    #   uses: actions/download-artifact@v2.1.1
    #   with:
    #     name: 
    #       voteapp_worker
    #       voteapp_vote
    #       voteapp_result

    - name: Load Container Images
      run: |
        docker load -i voteapp_worker/voteapp_worker_image.tar
        docker load -i voteapp_vote/voteapp_vote_image.tar
        docker load -i voteapp_result/voteapp_result_image.tar


    - name: Login to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ steps.createInfra.outputs.acr_endpoint }}
        username: ${{ secrets.ARM_CLIENT_ID }}
        password: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Load and push container images from tarballs
      run: |

        docker tag $(docker images -q voteapp_worker/voteapp_worker_image) ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.WORKER_IMG }}:${{ env.VERSION }}
        docker push ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.WORKER_IMG }}:${{ env.VERSION }}

        docker tag $(docker images -q voteapp_vote/voteapp_vote_image) ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.VOTE_IMG }}:${{ env.VERSION }}
        docker push ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.VOTE_IMG }}:${{ env.VERSION }}

        docker tag $(docker images -q voteapp_result/voteapp_result_image) ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.RESULT_IMG }}:${{ env.VERSION }}
        docker push ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.RESULT_IMG }}:${{ env.VERSION }}

    - name: Deploy Voting App
      run: |
        kubectl create -f k8s-specifications/

    # - name: Tag and push
    #   run: |
    #     docker tag ${{ env.WORKER_IMG }}:local ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.WORKER_IMG }}
    #     docker push ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.WORKER_IMG }}:${{ env.VERSION }}

    #     docker tag ${{ env.VOTE_IMG }}:local ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.VOTE_IMG }}
    #     docker push ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.VOTE_IMG }}:${{ env.VERSION }}

    #     docker tag ${{ env.RESULT_IMG }}:local ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.RESULT_IMG }}
    #     docker push ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.RESULT_IMG }}:${{ env.VERSION }}        