name: Terraform Container Build

on:    
  pull_request:
    branches:
      - main
      - erick-testingcicd
    types:
      - opened
      - synchronize      

  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DEPLOY_NAME: sysdigvoteapp
  WORKER_IMG: voteapp/worker
  VOTE_IMG: voteapp/vote
  RESULT_IMG: voteapp/result 
  VERSION: latest
  SYSDIG_API_URL: https://app.us4.sysdig.com/
  SYSDIG_LINUX_BINARY: "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(curl -L -s https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
jobs:

  Build-Infrastructure:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Azure Infrastructure
      id: createInfra
      run: |
        # // Deploy templates
        #     az deployment sub create --name ${{ env.DEPLOY_NAME }} --location eastus2 --template-file templates/bicep/main.bicep
        
        # // Get names from deployment output
        rg_name=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.rgName.value' --output tsv)
        aks_name=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.aksName.value' --output tsv)
        acr_resource_id=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.acrId.value' --output tsv)
        acr_endpoint=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.acrEndpoint.value' --output tsv)

        # // Attach using acr-resource-id
        #     az aks update -n $aks_name -g $rg_name --attach-acr $acr_resource_id

        # // Export output variables
        echo "::set-output name=acr_resource_id::$acr_resource_id"
        echo "::set-output name=acr_endpoint::$acr_endpoint"

    - name: Download Sysdig and Scan Images
      run: |
        export SECURE_API_TOKEN=${{ secrets.SYSDIG_SECURE_TOKEN }}
        curl -LO ${{  env.SYSDIG_LINUX_BINARY }}
        chmod +x ./sysdig-cli-scanner
        ./sysdig-cli-scanner --apiurl ${{ env.SYSDIG_API_URL }} ${{ env.WORKER_IMG }}:local

    - name: Build and Export Local Containers
      run: |
        pwd
        ls worker/
        docker buildx build worker/ -t ${{ env.WORKER_IMG }}:local
        docker images
        #docker buildx build vote/ -t ${{ env.VOTE_IMG }}:local
        #docker buildx build result/ -t ${{ env.RESULT_IMG }}:local

    - name: Login to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ steps.createInfra.outputs.acr_endpoint }}
        username: ${{ secrets.ARM_CLIENT_ID }}
        password: ${{ secrets.ARM_CLIENT_SECRET }}

    - name: Tag and push
      run: |
        docker tag ${{ env.WORKER_IMG }}:local ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.WORKER_IMG }}
        docker push ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.WORKER_IMG }}:${{ env.VERSION }}

        docker tag ${{ env.VOTE_IMG }}:local ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.VOTE_IMG }}
        docker push ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.VOTE_IMG }}:${{ env.VERSION }}

        docker tag ${{ env.RESULT_IMG }}:local ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.RESULT_IMG }}
        docker push ${{ steps.createInfra.outputs.acr_endpoint }}/${{ env.RESULT_IMG }}:${{ env.VERSION }}        