name: Terraform Container Build

on:    
  pull_request:
    branches:
      - main
      - erick-testingcicd
    types:
      - opened
      - synchronize      

  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DEPLOY_NAME: sysdigvoteapp
  WORKER_IMG: voteapp/worker
  VOTE_IMG: voteapp/vote
  RESULT_IMG: voteapp/result

  VERSION: latest

jobs:

  Build-Infrastructure:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Azure Infrastructure
      id: createInfra
      run: |
        # // Deploy templates
        #     az deployment sub create --name ${{ env.DEPLOY_NAME }} --location eastus2 --template-file templates/bicep/main.bicep
        
        # // Get names from deployment output
        rg_name=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.rgName.value' --output tsv)
        aks_name=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.aksName.value' --output tsv)
        acr_resource_id=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.acrId.value' --output tsv)
        acr_endpoint=$(az deployment sub show --name ${{ env.DEPLOY_NAME }} --query 'properties.outputs.acrEndpoint.value' --output tsv)

        # // Attach using acr-resource-id
        #     az aks update -n $aks_name -g $rg_name --attach-acr $acr_resource_id

        # // Export output variables
        echo "::set-output name=acr_resource_id::$acr_resource_id"
        echo "::set-output name=acr_endpoint::$acr_endpoint"

    - name: Build and Export Local Containers
      run: |
        docker build -t ${{ env.WORKER_IMG }}:local -f worker/
        docker build -t ${{ env.VOTE_IMG }}:local -f vote/
        docker build -t ${{ env.RESULT_IMG }}:local -f result/

    - name: Create ACR Push Service Principal
      run: |
        PASSWORD=$(az ad sp create-for-rbac --name $SERVICE_PRINCIPAL_NAME --scopes $ACR_REGISTRY_ID --role acrpull --query "password" --output tsv)
        USER_NAME=$(az ad sp list --display-name $SERVICE_PRINCIPAL_NAME --query "[].appId" --output tsv)        

    - name: Login to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ steps.createInfra.outputs.acrEndpoint }}
        username: ${{ secrets.AZURE_CREDENTIALS.clientId }}
        password: ${{ secrets.AZURE_CREDENTIALS.clientSecret }}

    - name: Tag and push
      run: |
        docker tag ${{ env.WORKER_IMG }}:local ${{ steps.createInfra.outputs.acrEndpoint }}/${{ env.WORKER_IMG }}
        docker push ${{ steps.createInfra.outputs.acrEndpoint }}/${{ env.WORKER_IMG }}:${{ env.VERSION }}